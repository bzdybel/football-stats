{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useMemo, useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport colors from \"../constants/colors\";\nimport { ListItem, ListSeparator } from \"../components/List\";\nimport { SHOW_FAVOURITES, SHOW_ALL, SET_LEAGUES } from \"../store/constants/actionTypes\";\nexport var List = function List(_ref) {\n  var navigation = _ref.navigation;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.general;\n  }),\n      leagues = _useSelector.leagues,\n      originalLeagues = _useSelector.originalLeagues,\n      favouriteLeagues = _useSelector.favouriteLeagues;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isEnabled = _useState2[0],\n      setIsEnabled = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      filterValue = _useState4[0],\n      onFilterChange = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isFocused = _useState6[0],\n      setIsFocused = _useState6[1];\n\n  var toggleSwitch = function toggleSwitch() {\n    isEnabled ? dispatch({\n      type: SHOW_ALL,\n      payload: filterValue\n    }) : dispatch({\n      type: SHOW_FAVOURITES,\n      payload: filterValue\n    });\n    setIsEnabled(function (previousState) {\n      return !previousState;\n    });\n  };\n\n  var _onChangeText = function onChangeText(text) {\n    onFilterChange(text);\n\n    var leaguesCopy = _toConsumableArray(leagues).filter(function (e) {\n      return e.name.toLowerCase().includes(text.toLowerCase()) || e.abbr.toLowerCase().includes(text.toLowerCase());\n    });\n\n    dispatch({\n      type: SET_LEAGUES,\n      payload: text.length > 0 ? leaguesCopy : isEnabled ? favouriteLeagues : originalLeagues\n    });\n  };\n\n  var screens = useMemo(function () {\n    return leagues.map(function (e) {\n      return {\n        title: e.name,\n        subtitle: e.abbr,\n        target: e.slug,\n        image: e.logos,\n        id: e.id\n      };\n    });\n  }, [leagues]);\n  return React.createElement(FlatList, {\n    style: styles.container,\n    data: screens,\n    keyExtractor: function keyExtractor(item) {\n      return item.title;\n    },\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(ListItem, {\n        title: item.title,\n        subtitle: item.subtitle,\n        image: item.image,\n        onPress: function onPress() {\n          return navigation.navigate(item.target);\n        },\n        id: item.id\n      });\n    },\n    ItemSeparatorComponent: ListSeparator,\n    ListHeaderComponent: React.createElement(View, {\n      style: [styles.row]\n    }, React.createElement(TouchableHighlight, {\n      activeOpacity: 0.6,\n      underlayColor: \"#800080\",\n      style: [styles.button, isEnabled ? styles.enabled : styles.disabled],\n      onPress: toggleSwitch\n    }, React.createElement(Text, {\n      style: [styles.text, isEnabled ? styles.enabledText : styles.disabledText]\n    }, \"Show favourites\")), React.createElement(TextInput, {\n      style: [styles.input, !isFocused && {\n        borderWidth: 5,\n        borderColor: \"#800080\"\n      }],\n      onChangeText: function onChangeText(e) {\n        return _onChangeText(e);\n      },\n      value: filterValue,\n      onFocus: function onFocus() {\n        return setIsFocused(true);\n      }\n    })),\n    ListFooterComponent: ListSeparator\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background\n  },\n  button: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingVertical: 5,\n    paddingHorizontal: 10,\n    borderRadius: 20,\n    elevation: 3,\n    border: \"2px solid #800080\",\n    marginLeft: 15,\n    width: 200\n  },\n  text: {\n    fontSize: 16,\n    lineHeight: 21,\n    fontWeight: \"bold\",\n    letterSpacing: 0.25\n  },\n  enabled: {\n    backgroundColor: \"#800080\"\n  },\n  disabled: {\n    backgroundColor: \"transparent\"\n  },\n  enabledText: {\n    color: \"white\"\n  },\n  disabledText: {\n    color: \"black\"\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    borderWidth: 1,\n    padding: 10\n  },\n  row: {\n    flex: 1,\n    flexDirection: \"row\",\n    alignItems: \"center\"\n  }\n});","map":{"version":3,"sources":["/Users/bzdybel/Documents/Projekty/football-stats/src/screens/List.tsx"],"names":["React","useMemo","useState","useSelector","useDispatch","colors","ListItem","ListSeparator","SHOW_FAVOURITES","SHOW_ALL","SET_LEAGUES","List","navigation","dispatch","state","general","leagues","originalLeagues","favouriteLeagues","isEnabled","setIsEnabled","filterValue","onFilterChange","isFocused","setIsFocused","toggleSwitch","type","payload","previousState","onChangeText","text","leaguesCopy","filter","e","name","toLowerCase","includes","abbr","length","screens","map","title","subtitle","target","slug","image","logos","id","styles","container","item","navigate","row","button","enabled","disabled","enabledText","disabledText","input","borderWidth","borderColor","StyleSheet","create","flex","backgroundColor","background","alignItems","justifyContent","paddingVertical","paddingHorizontal","borderRadius","elevation","border","marginLeft","width","fontSize","lineHeight","fontWeight","letterSpacing","color","height","margin","padding","flexDirection"],"mappings":"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","sourcesContent":["import React, { useMemo, useState, useCallback } from \"react\";\nimport {\n    StyleSheet,\n    FlatList,\n    TouchableHighlight,\n    Text,\n    TextInput,\n    View,\n} from \"react-native\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport colors from \"../constants/colors\";\nimport { ListItem, ListSeparator } from \"../components/List\";\nimport { MainStackParams } from \"../navigation/Main\";\nimport { LeagueType } from \"../store/reducers/general\";\nimport {\n    SHOW_FAVOURITES,\n    SHOW_ALL,\n    SET_LEAGUES,\n} from \"../store/constants/actionTypes\";\n\ntype Props = {\n    navigation: StackNavigationProp<MainStackParams, \"Leagues\">;\n};\n\nexport const List = ({ navigation }: Props) => {\n    const dispatch = useDispatch();\n    const { leagues, originalLeagues, favouriteLeagues } = useSelector(\n        (state: any) => state.general\n    );\n    const [isEnabled, setIsEnabled] = useState<boolean>(false);\n    const [filterValue, onFilterChange] = useState<string>(\"\");\n    const [isFocused, setIsFocused] = useState<boolean>(false);\n\n    const toggleSwitch = () => {\n        isEnabled\n            ? dispatch({ type: SHOW_ALL, payload: filterValue })\n            : dispatch({ type: SHOW_FAVOURITES, payload: filterValue });\n        setIsEnabled((previousState) => !previousState);\n    };\n    const onChangeText = (text: string) => {\n        onFilterChange(text);\n        const leaguesCopy = [...leagues].filter(\n            (e: LeagueType) =>\n                e.name.toLowerCase().includes(text.toLowerCase()) ||\n                e.abbr.toLowerCase().includes(text.toLowerCase())\n        );\n        dispatch({\n            type: SET_LEAGUES,\n            payload:\n                text.length > 0\n                    ? leaguesCopy\n                    : isEnabled\n                    ? favouriteLeagues\n                    : originalLeagues,\n        });\n    };\n\n    const screens = useMemo(\n        () =>\n            leagues.map((e: LeagueType) => {\n                return {\n                    title: e.name,\n                    subtitle: e.abbr,\n                    target: e.slug,\n                    image: e.logos,\n                    id: e.id,\n                };\n            }),\n        [leagues]\n    );\n\n    return (\n        <FlatList\n            style={styles.container}\n            data={screens}\n            keyExtractor={(item) => item.title}\n            renderItem={({ item }) => (\n                <ListItem\n                    title={item.title}\n                    subtitle={item.subtitle}\n                    image={item.image}\n                    onPress={() => navigation.navigate(item.target)}\n                    id={item.id}\n                />\n            )}\n            ItemSeparatorComponent={ListSeparator}\n            ListHeaderComponent={\n                <View style={[styles.row]}>\n                    <TouchableHighlight\n                        activeOpacity={0.6}\n                        underlayColor=\"#800080\"\n                        style={[\n                            styles.button,\n                            isEnabled ? styles.enabled : styles.disabled,\n                        ]}\n                        onPress={toggleSwitch}\n                    >\n                        <Text\n                            style={[\n                                styles.text,\n                                isEnabled\n                                    ? styles.enabledText\n                                    : styles.disabledText,\n                            ]}\n                        >\n                            {\"Show favourites\"}\n                        </Text>\n                    </TouchableHighlight>\n                    <TextInput\n                        style={[\n                            styles.input,\n                            !isFocused && {\n                                borderWidth: 5,\n                                borderColor: \"#800080\",\n                            },\n                        ]}\n                        onChangeText={(e) => onChangeText(e)}\n                        value={filterValue}\n                        onFocus={() => setIsFocused(true)}\n                    />\n                </View>\n            }\n            ListFooterComponent={ListSeparator}\n        />\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: colors.background,\n    },\n    button: {\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        paddingVertical: 5,\n        paddingHorizontal: 10,\n        borderRadius: 20,\n        elevation: 3,\n        border: \"2px solid #800080\",\n        marginLeft: 15,\n        width: 200,\n    },\n    text: {\n        fontSize: 16,\n        lineHeight: 21,\n        fontWeight: \"bold\",\n        letterSpacing: 0.25,\n    },\n    enabled: {\n        backgroundColor: \"#800080\",\n    },\n    disabled: {\n        backgroundColor: \"transparent\",\n    },\n    enabledText: {\n        color: \"white\",\n    },\n    disabledText: {\n        color: \"black\",\n    },\n    input: {\n        height: 40,\n        margin: 12,\n        borderWidth: 1,\n        padding: 10,\n    },\n    row: {\n        flex: 1,\n        flexDirection: \"row\",\n        alignItems: \"center\",\n    },\n});\n"]},"metadata":{},"sourceType":"module"}