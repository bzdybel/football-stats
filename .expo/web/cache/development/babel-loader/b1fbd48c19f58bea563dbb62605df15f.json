{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useMemo, useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport colors from \"../constants/colors\";\nimport { ListItem, ListSeparator } from \"../components/List\";\nimport { SHOW_FAVOURITES, SHOW_ALL } from \"../store/constants/actionTypes\";\nexport var List = function List(_ref) {\n  var navigation = _ref.navigation;\n  var dispatch = useDispatch();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isEnabled = _useState2[0],\n      setIsEnabled = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      filterValue = _useState4[0],\n      onFilterChange = _useState4[1];\n\n  var toggleSwitch = function toggleSwitch() {\n    isEnabled ? dispatch({\n      type: SHOW_FAVOURITES\n    }) : dispatch({\n      type: SHOW_ALL\n    });\n    setIsEnabled(function (previousState) {\n      return !previousState;\n    });\n  };\n\n  var _useSelector = useSelector(function (state) {\n    return state.general;\n  }),\n      leagues = _useSelector.leagues;\n\n  var screens = useMemo(function () {\n    return leagues.map(function (e) {\n      return {\n        title: e.name,\n        subtitle: e.abbr,\n        target: e.slug,\n        image: e.logos,\n        id: e.id\n      };\n    });\n  }, [leagues]);\n  return React.createElement(FlatList, {\n    style: styles.container,\n    data: screens,\n    keyExtractor: function keyExtractor(item) {\n      return item.title;\n    },\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(ListItem, {\n        title: item.title,\n        subtitle: item.subtitle,\n        image: item.image,\n        onPress: function onPress() {\n          return navigation.navigate(item.target);\n        },\n        id: item.id\n      });\n    },\n    ItemSeparatorComponent: ListSeparator,\n    ListHeaderComponent: React.createElement(TouchableHighlight, {\n      activeOpacity: 0.6,\n      underlayColor: \"#800080\",\n      style: [styles.button, isEnabled ? styles.enabled : styles.disabled],\n      onPress: toggleSwitch\n    }, React.createElement(Text, {\n      style: [styles.text, isEnabled ? styles.enabledText : styles.disabledText]\n    }, \"Show favourites\"), React.createElement(TextInput, {\n      style: styles.input,\n      onChangeText: onChangeText,\n      value: text\n    })),\n    ListFooterComponent: ListSeparator\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background,\n    paddingVertical: 20\n  },\n  button: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingVertical: 5,\n    paddingHorizontal: 10,\n    borderRadius: 20,\n    elevation: 3,\n    border: \"2px solid #800080\",\n    marginLeft: 15,\n    width: 200,\n    marginBottom: 15\n  },\n  text: {\n    fontSize: 16,\n    lineHeight: 21,\n    fontWeight: \"bold\",\n    letterSpacing: 0.25\n  },\n  enabled: {\n    backgroundColor: \"#800080\"\n  },\n  disabled: {\n    backgroundColor: \"transparent\"\n  },\n  enabledText: {\n    color: \"white\"\n  },\n  disabledText: {\n    color: \"black\"\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    borderWidth: 1,\n    padding: 10\n  }\n});","map":{"version":3,"sources":["/Users/bzdybel/Documents/Projekty/football-stats/src/screens/List.tsx"],"names":["React","useMemo","useState","useSelector","useDispatch","colors","ListItem","ListSeparator","SHOW_FAVOURITES","SHOW_ALL","List","navigation","dispatch","isEnabled","setIsEnabled","filterValue","onFilterChange","toggleSwitch","type","previousState","state","general","leagues","screens","map","e","title","name","subtitle","abbr","target","slug","image","logos","id","styles","container","item","navigate","button","enabled","disabled","text","enabledText","disabledText","input","onChangeText","StyleSheet","create","flex","backgroundColor","background","paddingVertical","alignItems","justifyContent","paddingHorizontal","borderRadius","elevation","border","marginLeft","width","marginBottom","fontSize","lineHeight","fontWeight","letterSpacing","color","height","margin","borderWidth","padding"],"mappings":"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","sourcesContent":["import React, { useMemo, useState } from \"react\";\nimport {\n    StyleSheet,\n    FlatList,\n    TouchableHighlight,\n    Text,\n    TextInput,\n} from \"react-native\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport colors from \"../constants/colors\";\nimport { ListItem, ListSeparator } from \"../components/List\";\nimport { MainStackParams } from \"../navigation/Main\";\nimport { LeagueType } from \"../store/reducers/general\";\nimport { SHOW_FAVOURITES, SHOW_ALL } from \"../store/constants/actionTypes\";\n\ntype Props = {\n    navigation: StackNavigationProp<MainStackParams, \"Leagues\">;\n};\n\nexport const List = ({ navigation }: Props) => {\n    const dispatch = useDispatch();\n    const [isEnabled, setIsEnabled] = useState(false);\n    const [filterValue, onFilterChange]= useState(false);\n    const toggleSwitch = () => {\n        isEnabled\n            ? dispatch({ type: SHOW_FAVOURITES })\n            : dispatch({ type: SHOW_ALL });\n        setIsEnabled((previousState) => !previousState);\n    };\n\n    const { leagues } = useSelector((state: any) => state.general);\n    const screens = useMemo(\n        () =>\n            leagues.map((e: LeagueType) => {\n                return {\n                    title: e.name,\n                    subtitle: e.abbr,\n                    target: e.slug,\n                    image: e.logos,\n                    id: e.id,\n                };\n            }),\n        [leagues]\n    );\n\n    return (\n        <FlatList\n            style={styles.container}\n            data={screens}\n            keyExtractor={(item) => item.title}\n            renderItem={({ item }) => (\n                <ListItem\n                    title={item.title}\n                    subtitle={item.subtitle}\n                    image={item.image}\n                    onPress={() => navigation.navigate(item.target)}\n                    id={item.id}\n                />\n            )}\n            ItemSeparatorComponent={ListSeparator}\n            ListHeaderComponent={\n                <TouchableHighlight\n                    activeOpacity={0.6}\n                    underlayColor=\"#800080\"\n                    style={[\n                        styles.button,\n                        isEnabled ? styles.enabled : styles.disabled,\n                    ]}\n                    onPress={toggleSwitch}\n                >\n                    <Text\n                        style={[\n                            styles.text,\n                            isEnabled\n                                ? styles.enabledText\n                                : styles.disabledText,\n                        ]}\n                    >\n                        {\"Show favourites\"}\n                    </Text>\n                    <TextInput\n                        style={styles.input}\n                        onChangeText={onChangeText}\n                        value={text}\n                    />\n                </TouchableHighlight>\n            }\n            ListFooterComponent={ListSeparator}\n        />\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: colors.background,\n        paddingVertical: 20,\n    },\n    button: {\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        paddingVertical: 5,\n        paddingHorizontal: 10,\n        borderRadius: 20,\n        elevation: 3,\n        border: \"2px solid #800080\",\n        marginLeft: 15,\n        width: 200,\n        marginBottom: 15,\n    },\n    text: {\n        fontSize: 16,\n        lineHeight: 21,\n        fontWeight: \"bold\",\n        letterSpacing: 0.25,\n    },\n    enabled: {\n        backgroundColor: \"#800080\",\n    },\n    disabled: {\n        backgroundColor: \"transparent\",\n    },\n    enabledText: {\n        color: \"white\",\n    },\n    disabledText: {\n        color: \"black\",\n    },\n    input: {\n        height: 40,\n        margin: 12,\n        borderWidth: 1,\n        padding: 10,\n    },\n});\n"]},"metadata":{},"sourceType":"module"}