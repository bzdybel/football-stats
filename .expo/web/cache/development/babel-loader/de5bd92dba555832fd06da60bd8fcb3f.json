{"ast":null,"code":"import React from 'react';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport colors from \"../constants/colors\";\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: colors.primary,\n    paddingVertical: 14,\n    borderRadius: 6,\n    borderWidth: 1,\n    borderColor: colors.primary,\n    marginVertical: 7\n  },\n  containerOutline: {\n    backgroundColor: 'transparent',\n    borderColor: colors.border\n  },\n  text: {\n    color: colors.white,\n    alignSelf: 'center',\n    fontSize: 18,\n    fontWeight: '500'\n  },\n  textOutline: {\n    color: colors.primary\n  }\n});\nexport var Button = function Button(_ref) {\n  var _ref$onPress = _ref.onPress,\n      onPress = _ref$onPress === void 0 ? function () {} : _ref$onPress,\n      _ref$children = _ref.children,\n      children = _ref$children === void 0 ? '' : _ref$children,\n      type = _ref.type;\n  var containerStyles = [styles.container];\n  var textStyles = [styles.text];\n\n  if (type === 'outline') {\n    containerStyles.push(styles.containerOutline);\n    textStyles.push(styles.textOutline);\n  }\n\n  return React.createElement(TouchableOpacity, {\n    onPress: onPress,\n    style: containerStyles\n  }, React.createElement(Text, {\n    style: textStyles\n  }, children));\n};","map":{"version":3,"sources":["/Users/bzdybel/Documents/Projekty/football-stats/src/components/Button.tsx"],"names":["React","colors","styles","StyleSheet","create","container","backgroundColor","primary","paddingVertical","borderRadius","borderWidth","borderColor","marginVertical","containerOutline","border","text","color","white","alignSelf","fontSize","fontWeight","textOutline","Button","onPress","children","type","containerStyles","textStyles","push"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAUA,OAAOC,MAAP;AAEA,IAAMC,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,eAAe,EAAEL,MAAM,CAACM,OADf;AAETC,IAAAA,eAAe,EAAE,EAFR;AAGTC,IAAAA,YAAY,EAAE,CAHL;AAITC,IAAAA,WAAW,EAAE,CAJJ;AAKTC,IAAAA,WAAW,EAAEV,MAAM,CAACM,OALX;AAMTK,IAAAA,cAAc,EAAE;AANP,GADoB;AAS/BC,EAAAA,gBAAgB,EAAE;AAChBP,IAAAA,eAAe,EAAE,aADD;AAEhBK,IAAAA,WAAW,EAAEV,MAAM,CAACa;AAFJ,GATa;AAc/BC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAEf,MAAM,CAACgB,KADV;AAEJC,IAAAA,SAAS,EAAE,QAFP;AAGJC,IAAAA,QAAQ,EAAE,EAHN;AAIJC,IAAAA,UAAU,EAAE;AAJR,GAdyB;AAoB/BC,EAAAA,WAAW,EAAE;AACXL,IAAAA,KAAK,EAAEf,MAAM,CAACM;AADH;AApBkB,CAAlB,CAAf;AA+BA,OAAO,IAAMe,MAAM,GAAG,SAATA,MAAS,OAIH;AAAA,0BAHjBC,OAGiB;AAAA,MAHjBA,OAGiB,6BAHP,YAAM,CAAE,CAGD;AAAA,2BAFjBC,QAEiB;AAAA,MAFjBA,QAEiB,8BAFN,EAEM;AAAA,MADjBC,IACiB,QADjBA,IACiB;AACjB,MAAMC,eAAuC,GAAG,CAACxB,MAAM,CAACG,SAAR,CAAhD;AACA,MAAMsB,UAAkC,GAAG,CAACzB,MAAM,CAACa,IAAR,CAA3C;;AAEA,MAAIU,IAAI,KAAK,SAAb,EAAwB;AACtBC,IAAAA,eAAe,CAACE,IAAhB,CAAqB1B,MAAM,CAACW,gBAA5B;AACAc,IAAAA,UAAU,CAACC,IAAX,CAAgB1B,MAAM,CAACmB,WAAvB;AACD;;AAED,SACE,oBAAC,gBAAD;AAAkB,IAAA,OAAO,EAAEE,OAA3B;AAAoC,IAAA,KAAK,EAAEG;AAA3C,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC;AAAb,KAA0BH,QAA1B,CADF,CADF;AAKD,CAlBM","sourcesContent":["import React from 'react';\nimport {\n  TouchableOpacity,\n  Text,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  ViewStyle,\n} from 'react-native';\n\nimport colors from '../constants/colors';\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: colors.primary,\n    paddingVertical: 14,\n    borderRadius: 6,\n    borderWidth: 1,\n    borderColor: colors.primary,\n    marginVertical: 7,\n  },\n  containerOutline: {\n    backgroundColor: 'transparent',\n    borderColor: colors.border,\n  },\n\n  text: {\n    color: colors.white,\n    alignSelf: 'center',\n    fontSize: 18,\n    fontWeight: '500',\n  },\n  textOutline: {\n    color: colors.primary,\n  },\n});\n\ntype ButtonProps = {\n  onPress: () => void;\n  children: string;\n  type?: 'outline';\n};\n\nexport const Button = ({\n  onPress = () => {},\n  children = '',\n  type,\n}: ButtonProps) => {\n  const containerStyles: StyleProp<ViewStyle>[] = [styles.container];\n  const textStyles: StyleProp<TextStyle>[] = [styles.text];\n\n  if (type === 'outline') {\n    containerStyles.push(styles.containerOutline);\n    textStyles.push(styles.textOutline);\n  }\n\n  return (\n    <TouchableOpacity onPress={onPress} style={containerStyles}>\n      <Text style={textStyles}>{children}</Text>\n    </TouchableOpacity>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}